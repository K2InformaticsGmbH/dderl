#!/bin/sh
#
# {{release_name}}
#
# chkconfig: 345 80 30
# description: {{release_description}}
# processname: beam
# config: /opt/{{release_name}}/config/sys.config
# config: /opt/{{release_name}}/config/vm.args
#

# Source function library.
. /etc/rc.d/init.d/functions

RETVAL=0
PATH=/sbin:/usr/sbin:/bin:/usr/bin
DESC="MPro is a multi-protocol messaging proxy"
NAME={{release_name}}
DAEMON=/opt/$NAME/bin/$NAME
lockfile=/var/lock/subsys/$NAME
pidfile=/var/run/$NAME/$NAME.pid

# Check for script, config and data dirs
if ! [ -x $DAEMON ]; then
    echo "$DAEMON not found"
    exit 0
fi
if ! [ -f /opt/$NAME/config/sys.config ]; then
    echo "/opt/$NAME/config/sys.config not found"
    exit 0
fi
if ! [ -f /opt/$NAME/config/vm.args ]; then
    echo "/opt/$NAME/config/vm.args not found"
    exit 0
fi
if ! [ -d /var/opt/$NAME ]; then
    echo "/var/opt/$NAME not found"
    exit 0
fi

status -p $pidfile -l $(basename $lockfile) $NAME &>/dev/null
running=$?

check_pid_status() {
    pid=$(ps ax | grep beam | grep "\-progname opt/$NAME/bin/$NAME" | awk '{print $1}')
    if [ "$pid" = "" ]; then
        # prog not running?
        return 1
    else
        # running
        return 0
    fi
}

start() {
    chown -R $NAME:$NAME /opt/$NAME
    chown -R $NAME:$NAME /var/opt/$NAME

    # Start daemons.
    echo -n $"Starting $NAME:"
    su --session-command="$DAEMON start" $NAME
    RETVAL=$?
    if [ $RETVAL -eq 0 ]; then
        touch $lockfile
        for n in $(seq 1 10); do
            sleep 1
            check_pid_status
            RETVAL=$?
            if [ $RETVAL -eq 0 ]; then
                pid=$(su --session-command="$DAEMON pid" $NAME)
                if [[ $pid =~ ^[0-9]+$ ]]; then
                    if ps -p $pid > /dev/null
                    then
                        echo $pid > $pidfile
                        break
                    fi
                fi
            fi
            echo -n "."
        done
        success
    else
        failure $"$NAME start"
    fi
    echo
    return $RETVAL
}

stop() {
    # Stop daemon.
    echo -n $"Shutting down $NAME: "
    su --session-command="$DAEMON stop" $NAME > /dev/null
    for n in $(seq 1 10); do
        sleep 1
        check_pid_status
        RETVAL=$?
        if [ $RETVAL -eq 1 ]; then
            break
        fi
        echo -n "."
    done
    if [ $RETVAL -eq 1 ]; then
        rm -f $lockfile $pidfile
        success
    else
        echo -n $"$NAME stop failure status: $RETVAL"
        failure $"$NAME stop"
    fi
    echo
    return $RETVAL
}

hardstop() {
    echo -n $"Shutting down $NAME: "
    su - $NAME -c "ps -ef | grep beam | grep '\-progname $NAME ' | grep -v grep | awk '{print \$2}' | xargs kill -9"
    for n in $(seq 1 10); do
        sleep 1
        check_pid_status
        RETVAL=$?
        if [ $RETVAL -eq 1 ]; then
            break
        fi
    done
    if [ $RETVAL -eq 1 ]; then
        rm -f $lockfile $pidfile
        success
    else
        failure $"$NAME hardstop"
    fi
    echo
    return $RETVAL
}

# See how we were called.
case "$1" in
    start)
        [ $running -eq 0 ] && exit 0
        start
        ;;
    stop)
        if [ $running -eq 0 ]; then
            stop
        else
            check_pid_status
            RETVAL=$?
            if [ $RETVAL -eq 1 ]; then
                rm -f $lockfile $pidfile
            fi
            exit 0
        fi
        ;;
    restart|force-reload)
        [ $running -eq 0 ] && stop
        start
        ;;
    hardstop)
        [ $running -eq 0 ] || exit 0
        hardstop
        ;;
    condrestart|try-restart)
        [ $running -eq 0 ] || exit 0
        restart
        ;;
    status)
        status -p $pidfile -l $(basename $lockfile) $NAME
        ;;
    ping)
        $DAEMON ping || exit $?
        ;;
    *)
        echo $"Usage: $0 {start|stop|restart|force-reload|hardstop|condrestart|try-restart|status|ping}"
        exit 1
esac

exit $?
